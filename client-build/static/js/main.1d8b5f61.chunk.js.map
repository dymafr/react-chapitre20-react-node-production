{"version":3,"sources":["store/reducers.js","store/index.js","App.js","index.js"],"names":["auth","state","arguments","length","undefined","isLoggedin","appReducer","combineReducers","reducers","middlewares","thunkMiddleware","store","createStore","composeWithDevTools","applyMiddleware","apply","asyncReducers","injectReducer","key","reducer","replaceReducer","Object","objectSpread","LazyTodos","Loadable","loader","Promise","all","__webpack_require__","e","then","bind","loading","react_default","a","createElement","App","className","Route","path","component","Component","ReactDOM","render","es","BrowserRouter","src_App","document","getElementById"],"mappings":"wJAAaA,EAAO,WAA2C,IAA1CC,EAA0CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlC,CAAEG,YAAY,GAAoBH,UAAAC,OAAA,GAAAD,UAAA,GAC7D,OAAOD,kECMT,IAAMK,EAAcC,0BAAgBC,GAC9BC,EAAc,CAACC,KAId,IAAMC,EAAQC,sBAAYN,EAAYO,8BAC3CC,kBAAeC,WAAf,EAAmBN,KAGrBE,EAAMK,cAAgB,GAEtB,IAA4BL,EAKfM,GALeN,EAKqBA,EALZ,SAACO,EAAKC,GACzCR,EAAMK,cAAcE,GAAOC,EAC3BR,EAAMS,eAAeb,0BAAgBc,OAAAC,EAAA,EAAAD,CAAA,GAAKb,EAAaG,EAAMK,mBAMhDL,2MCtBTY,QAAYC,GAAS,CACzBC,OAAQ,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,WACdC,QAAS,kBAAMC,EAAAC,EAAAC,cAAA,8BAaFC,mLARX,OACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAYjB,YAJlBkB,qCCDlBC,IAASC,OACPV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAUjC,MAAQA,KAChBsB,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAD,QAGJC,SAASC,eAAe","file":"static/js/main.1d8b5f61.chunk.js","sourcesContent":["export const auth = (state = { isLoggedin: false }, action) => {\n  return state;\n}","import * as reducers from './reducers';\nimport { combineReducers } from 'redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunkMiddleware from 'redux-thunk';\n\nconst appReducer = (combineReducers(reducers));\nconst middlewares = [thunkMiddleware];\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\nexport const store = createStore(appReducer, composeWithDevTools(\n  applyMiddleware(...middlewares)\n));\n\nstore.asyncReducers = {};\n\nconst createInjectReducer = store => (key, reducer) => {\n  store.asyncReducers[key] = reducer;\n  store.replaceReducer(combineReducers({ ...reducers, ...store.asyncReducers }))\n}\n\nexport const injectReducer = createInjectReducer(store);\n\n\nexport default store;","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport Loadable from 'react-loadable';\n\nconst LazyTodos = Loadable({\n  loader: () => import(/* webpackChunkName: 'todos' */'./features/todos'),\n  loading: () => <h1> Loading ... </h1>\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container p-5\">\n        <Route path=\"/\" component={ LazyTodos } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Provider store={ store } >\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n, document.getElementById('root'));\n"],"sourceRoot":""}